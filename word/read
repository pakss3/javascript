Inline caching 
최적화 테크닉, 랭귀지 실행시간에 사용됨, smalltalk에서 처음 사용됨
호출지점에서 직접적으로 이전메소드 검색의 결과를 기억해서 런타임메소드 바인딩의 성능을 높이는 것.
대부분의 메소드 바인딩이 런타임에서 일어나고 가상 메소드 테이블을 사용할 수 없는 동적 언어에 특히 유용

Runtime method binding 
동적언어에서 오브젝트 타입이 명시되지 않고 메소드 오버로딩 가능성이 존재
-> 메소드를 호출할 때 구체적으로 어떤 함수가 적용될지 미리 결정할 수 없다.
캐싱을 사용하지 않는 런타임에 이러한 검색은 하나의 메소드가 불릴때마다 매번 실행된다. 
메소드들은 상속 체인을 따라 내려가서 여러단계로 정의 될 수 있기때문에 동적 검색은 시간이 많이 소요된다

퍼포먼스를 향상시키기 위해 많은 언어들은 연관 데이터 구조 안에 제한된 숫자의 메소드 결과를 검색결과를 저장해 놓고 
모종의 non-inline 캐싱을 사용한다. 이것은 실행되는 프로그램들이 "cache friendly"할때(제한된 숫자의 메소드가 자주 불릴때)
성능이 크게 향상된다.
이러한 데이터 구조를 일반적으로 "first-level method lookup cache"라고 불린다

인라인 캐싱 개념은 특정 호출지점에서 발생하는 오브젝트들은 주로 같은 타입이라는 경험적 관찰을 기반으로 한다.
그런 경우에 메소드 검색결과를 "inline"으로 즉 호출지점의 직접 저장해 놓으면 성능이 크게 증가 할 수 있다. 이 과정을 가능하게 하려고 호출지점들에 서로 다른 상태를 부여한다.
처음에는 각  호출지점은 "uninitialized" 상태이다. 일단 런타임이 특정한 uninitialized 호출지점에 도착하면, 동적 검색을 수행하고, 호출지점에 결과를 저장하고 호출지점의 상태를 
"monomorphic"(단형성)으로 바꾼다. 언어 런타임이 똑같은 호출 지점에 도달한다고 callee를 (inline cache로부터) 다시 가져와서 더이상 검색을 수행하지 않고 곧바로 불러온다.
같은 호출지점에서 서로 다른 타입의 오브젝트가 존재 할 수도 있기때문에, 언어 런타임은 코드 안에 gaurd condition도 삽입을 해야만 한다. 흔히 guard condition들은 
호출지점보다는 callee 프리앰블에 삽입한다.
프리엠블에 하나의 카피만 있는것을 각 호출지점마다 여러 카피가 있는것에 비해 공간을 절약


고전적인 구현방법은 레지스터에 상수를 불러온 뒤에 콜 명령어가 오는 것이다. 
"uninitialized" 상태는 "unlinked"로 불리는 것이 낫다. 레지스터에 message selector(주로 어떤 오브젝트의 주소)를 채우고,
(함수의) 호출은 위에서 말한 first-level method lookup cache를 사용해서 현재 리시버의 클래스(분류?) 안에 있는 메세지를 탐색하는 런타임 루틴이 된다.
그렇게 되면 런타임 루틴은 로드 명령어를 레지스터에 현재 리시버의 타입을 채우는 것으로 바꾸고, call 명령어를 바꿔서 타겟 메소드의 프리앰블을 부르도록 바꿔서 명령어를 다시 쓴다. 
그러면 호출 지점과 타겟 메소드를 "연결(linking)"하는 것이다. (함수의) 실행은 이제 프리앰블을 곧장 따라가면서 이어진다. 다음 번의 실행에서는 (linking 없이) 프리앰블을 
직접적으로 호출할 수 있을 것이다. 그러면 프리앰블은 현재 리시버의 타입을 가져와서 레지스터 안에 있는 값과 비교할 것이다. 만약 맞아떨어진다면 
시버는 같은 타입이므로 메소드를 계속해서 실행한다. 다르다면 프리앰블은 다양한 전략들을 시도해볼 수 있다. 호출 지점과 새로운 리시버 타입을 재연결하는 것이 한 방법이 될 수 있다.
-> 최초 uninitialized  -> 레지스터, object 와 같은 데이터 저장소에 저장해두고 이것을 호출할 시 상태가 uninitialized면 monomorphic(단형성) 상태로 변경 이것을 호추
아니면 monomorphic을 호출

어떤 함수를 호출할때 같은 call site에서는 계속해서 같은 함수를 불러 호출 할 가능성이 높음
최초로 call site에 도달했을때 어떤 함수를 불러와야 할 지 알수 없으므로 완전히 메소드를 검색해야한다.
불러올 함수가 결정되면 다음번 call site에 도달할 때 까지 방금전 찾아온 메소드를 바로 찾아 갈 수 있도록  call site에 등록해둠
함수 overloading 등을 대비해서 불러올 함수의 유형이 달라질 것에 대비해서 guard instruction을 삽입함
만약 call site마다 guard instruction을 삽입하게 되면 매 함수마다 guard instruction를 등록해야되서 
낭비 발생
불러올 대상이 되는 함수의 맨 앞에 guard instruction를 붙여줌
만약 guard instruction를 실행했을때 원래 예측했던 타입과 다르면 다시 돌아가서 메소드 부터 검색
